
==================== FINAL INTERFACE ====================
2017-07-13 19:24:54.652382 UTC

interface kindergarten-garden-1.0.0.3-FeKcKDgtP5mAil4uyTofG9:Garden 8002
  interface hash: c9d226da7e94390d4dea9eb227a314b0
  ABI hash: d4debeadd4451e9ffd89bc3a4b579333
  export-list hash: 2d0dc4a3d4c07307816c7843c0e1cfc5
  orphan hash: 8c44cad25f53c0bfd23727cea897f8a5
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Garden.defaultGarden
  Garden.garden
  Garden.lookupPlants
  Garden.Plant{Garden.Clover Garden.Grass Garden.Radishes Garden.Violets}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Control.Arrow 70754b538e7d75521cd68162917b6946
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
088302c07ffd58c10b193ca048bcdd74
  $fEqPlant :: GHC.Classes.Eq Garden.Plant
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Garden.Plant Garden.$fEqPlant_$c== Garden.$fEqPlant_$c/= -}
088302c07ffd58c10b193ca048bcdd74
  $fEqPlant_$c/= :: Garden.Plant -> Garden.Plant -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Garden.Plant) (b :: Garden.Plant) ->
                 case a of wild {
                   Garden.Clover
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Clover -> GHC.Types.False }
                   Garden.Grass
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Grass -> GHC.Types.False }
                   Garden.Radishes
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Radishes -> GHC.Types.False }
                   Garden.Violets
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Violets -> GHC.Types.False } }) -}
088302c07ffd58c10b193ca048bcdd74
  $fEqPlant_$c== :: Garden.Plant -> Garden.Plant -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Garden.Plant) (ds1 :: Garden.Plant) ->
                 case ds of wild {
                   Garden.Clover
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Clover -> GHC.Types.True }
                   Garden.Grass
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Grass -> GHC.Types.True }
                   Garden.Radishes
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Radishes -> GHC.Types.True }
                   Garden.Violets
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Violets -> GHC.Types.True } }) -}
088302c07ffd58c10b193ca048bcdd74
  $fShowPlant :: GHC.Show.Show Garden.Plant
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Garden.Plant
                  Garden.$fShowPlant_$cshowsPrec
                  Garden.$fShowPlant_$cshow
                  Garden.$fShowPlant_$cshowList -}
7de5ebee1b3faf36a57643cc2d8561e0
  $fShowPlant1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Violets"#) -}
fc31eda74a517c20584a0a666cd89500
  $fShowPlant2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Radishes"#) -}
5ebdc8d204c34570d88f117b99c23c83
  $fShowPlant3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Grass"#) -}
75cca6f4b138ea4d49d8ffacb3514304
  $fShowPlant4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Clover"#) -}
088302c07ffd58c10b193ca048bcdd74
  $fShowPlant_$cshow :: Garden.Plant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Garden.Plant) ->
                 Garden.$fShowPlant_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
088302c07ffd58c10b193ca048bcdd74
  $fShowPlant_$cshowList :: [Garden.Plant] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Garden.Plant
                   Garden.$w$cshowsPrec) -}
088302c07ffd58c10b193ca048bcdd74
  $fShowPlant_$cshowsPrec ::
    GHC.Types.Int -> Garden.Plant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Garden.Plant)
                   (w2 :: GHC.Base.String) ->
                 Garden.$w$cshowsPrec w1 w2) -}
d212745af6aa021da8cfc315e89a4f81
  $sfromListWith_$sfromListWithKey ::
    (GHC.Base.String -> a -> a -> a)
    -> [(GHC.Base.String, a)] -> Data.Map.Base.Map GHC.Base.String a
  {- Arity: 2, Strictness: <L,C(C1(C1(U)))><S,1*U>,
     Unfolding: (\ @ a
                   (f :: GHC.Base.String -> a -> a -> a)
                   (xs :: [(GHC.Base.String, a)]) ->
                 letrec {
                   go10 :: Data.Map.Base.Map GHC.Base.String a
                           -> [(GHC.Base.String, a)] -> Data.Map.Base.Map GHC.Base.String a
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (z :: Data.Map.Base.Map GHC.Base.String a)
                       (ds :: [(GHC.Base.String, a)]) ->
                     case ds of wild {
                       [] -> z
                       : x xs1
                       -> case x of wild1 { (,) k1 x1 ->
                          case Garden.$sfromListWith_$sgo10 @ a f k1 x1 z of z' { DEFAULT ->
                          go10 z' xs1 } } }
                 } in
                 go10 (Data.Map.Base.Tip @ GHC.Base.String @ a) xs) -}
8af88a79fe34353b357f458efeef058a
  $sfromListWith_$sgo10 ::
    (GHC.Base.String -> a1 -> a1 -> a1)
    -> GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 4, Strictness: <L,1*C1(C1(C1(U)))><S,1*U><L,U><S,1*U> -}
5de5e79820b9940103254b6caf5eec52
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ee1e81b4f839e621a882e40125abb435
  $tc'Clover :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6349739501547651867##
                   10278435618463636760##
                   Garden.$trModule
                   Garden.$tc'Clover1) -}
4b8a316ac6d772224de11c32d69f08ae
  $tc'Clover1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Clover"#) -}
a0c79938a60ae88d3dbd6e8d0d13a875
  $tc'Grass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2400262735306004464##
                   5972496139534847859##
                   Garden.$trModule
                   Garden.$tc'Grass1) -}
eff135e569c261771b8bdb0006196e43
  $tc'Grass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Grass"#) -}
504ab3f7a0ab3ce588eb818c694dc766
  $tc'Radishes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1919027018980330266##
                   16921420597978925326##
                   Garden.$trModule
                   Garden.$tc'Radishes1) -}
2f7dc77a36a8501c44dbb94b4355bc3a
  $tc'Radishes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Radishes"#) -}
a59f21d7c6e1a303d49b4226dd962bc4
  $tc'Violets :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13436131148131069430##
                   12316472627329293504##
                   Garden.$trModule
                   Garden.$tc'Violets1) -}
7f7191e476f21ae38e0bb1c036d3022d
  $tc'Violets1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Violets"#) -}
0ea4fd26963f6da819093d04103c3643
  $tcPlant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18265706479077010398##
                   857476702476922896##
                   Garden.$trModule
                   Garden.$tcPlant1) -}
c91b85b92a797c541ad63603bf9f56b4
  $tcPlant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Plant"#) -}
98c349258bf9bb7c75b6a82395678b56
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Garden.$trModule2
                   Garden.$trModule1) -}
6daf59d3036b8e5d942d6f8ea6bf11b3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Garden"#) -}
0dc1f4a2cbc070e2ae0a618baa14d246
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "kindergarten-garden-1.0.0.3-FeKcKDgtP5mAil4uyTofG9"#) -}
088302c07ffd58c10b193ca048bcdd74
  $w$cshowsPrec :: Garden.Plant -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Garden.Plant) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Garden.Clover
                   -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant4 w1
                   Garden.Grass -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant3 w1
                   Garden.Radishes
                   -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant2 w1
                   Garden.Violets
                   -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant1 w1 }) -}
088302c07ffd58c10b193ca048bcdd74
  data Plant = Clover | Grass | Radishes | Violets
8762b03be6d648608c5940a5ea9a59ee
  defaultGarden ::
    GHC.Base.String -> Data.Map.Base.Map GHC.Base.String [Garden.Plant]
  {- Unfolding: (Garden.garden Garden.defaultGarden1) -}
4487510c7e491b2bea25ecd63d9a3dcb
  defaultGarden1 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden24
                   Garden.defaultGarden2) -}
469b3b63d316219a9a53138947b05e01
  defaultGarden10 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden15
                   Garden.defaultGarden11) -}
c8347157db69565b55757625ad69f076
  defaultGarden11 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden14
                   Garden.defaultGarden12) -}
669332e0c8e99017dca756affcc4ba9c
  defaultGarden12 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden13
                   (GHC.Types.[] @ GHC.Base.String)) -}
c6018a4e83c69a919f7a208807567ee7
  defaultGarden13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Larry"#) -}
38ed178c5febed3a80e13b920775f785
  defaultGarden14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Kincaid"#) -}
f6dac3ad0a8f9c3a03907868c342274c
  defaultGarden15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Joseph"#) -}
4af7a2e231d02a382aac74cad3b285af
  defaultGarden16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ileana"#) -}
dc28890e1923a1952d5958cc5325a133
  defaultGarden17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Harriet"#) -}
89fa739bc6f1bdb5d11fd9a1cc2db364
  defaultGarden18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ginny"#) -}
84e38934c38a3ae5f3dc3388498551cd
  defaultGarden19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fred"#) -}
7bf9f9b74781cc11e0278c4cf75b7c0c
  defaultGarden2 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden23
                   Garden.defaultGarden3) -}
c9820e4a3458419bcf7e1323fd3cf661
  defaultGarden20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Eve"#) -}
4ab15620b40cbbdd5a1b0161c62e10c8
  defaultGarden21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "David"#) -}
7346f7000b134fc42bf0921d8a20919d
  defaultGarden22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Charlie"#) -}
6b6144af2c45b1f00cffd3611eb77970
  defaultGarden23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bob"#) -}
6c48e8c85bd1b8882b6c321abefa1384
  defaultGarden24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Alice"#) -}
44c53073476378ebdef4812f68bc3232
  defaultGarden3 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden22
                   Garden.defaultGarden4) -}
af6724ae21a732cd41e5159462bbc2a4
  defaultGarden4 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden21
                   Garden.defaultGarden5) -}
4ed4861fd8aef09a2af296a2865d1456
  defaultGarden5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden20
                   Garden.defaultGarden6) -}
ba898816ff7f47d17d9b02cb4ad62fd5
  defaultGarden6 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden19
                   Garden.defaultGarden7) -}
41284a2cc0adc514f79f11150ae320df
  defaultGarden7 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden18
                   Garden.defaultGarden8) -}
db948cd9851bcc1d6895327d0ec5c60b
  defaultGarden8 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden17
                   Garden.defaultGarden9) -}
d3139a6596e2c5d265ec4d702d2f1a35
  defaultGarden9 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Garden.defaultGarden16
                   Garden.defaultGarden10) -}
50001723b6c27526631cfc9ecd8edd64
  garden ::
    [GHC.Base.String]
    -> GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String [Garden.Plant]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (students :: [GHC.Base.String]) ->
                 let {
                   f :: [GHC.Base.String]
                   = Garden.garden_go
                       (Data.OldList.sortBy
                          @ GHC.Base.String
                          GHC.Classes.$fOrd[]_$s$ccompare1
                          students)
                 } in
                 letrec {
                   go :: [[GHC.Types.Char]] -> [(GHC.Base.String, [Garden.Plant])]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [[GHC.Types.Char]]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (GHC.Base.String, [Garden.Plant])
                       : y ys
                       -> let {
                            z :: [(GHC.Base.String, [Garden.Plant])] = go ys
                          } in
                          letrec {
                            go1 :: [[GHC.Types.Char]]
                                   -> [GHC.Types.Char] -> [(GHC.Base.String, [Garden.Plant])]
                              {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                            = \ (ds1 :: [[GHC.Types.Char]]) (_ys :: [GHC.Types.Char]) ->
                              case ds1 of wild1 {
                                [] -> z
                                : ipv ipv1
                                -> case _ys of wild2 {
                                     [] -> z
                                     : ipv2 ipv3
                                     -> GHC.Types.:
                                          @ (GHC.Base.String, [Garden.Plant])
                                          (ipv,
                                           GHC.Types.:
                                             @ Garden.Plant
                                             (case ipv2 of wild3 { GHC.Types.C# ds2 ->
                                              case ds2 of ds3 {
                                                DEFAULT -> Garden.garden2
                                                'C'# -> Garden.Clover
                                                'G'# -> Garden.Grass
                                                'R'# -> Garden.Radishes
                                                'V'# -> Garden.Violets } })
                                             (GHC.Types.[] @ Garden.Plant))
                                          (go1 ipv1 ipv3) } }
                          } in
                          go1 f y }
                 } in
                 \ (x :: GHC.Base.String) ->
                 Garden.$sfromListWith_$sfromListWithKey
                   @ [Garden.Plant]
                   Garden.garden1
                   (go (Data.OldList.lines x))) -}
2d18e677e2bb0f05e8b41a288ef5a901
  garden1 ::
    GHC.Base.String
    -> [Garden.Plant] -> [Garden.Plant] -> [Garden.Plant]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (ds :: GHC.Base.String)
                   (x :: [Garden.Plant])[OneShot]
                   (y :: [Garden.Plant])[OneShot] ->
                 GHC.Base.++ @ Garden.Plant y x) -}
1d62d1326faa6d1090173fd01a3e2a43
  garden2 :: Garden.Plant
  {- Strictness: x -}
72d6e1108b24a449d85f1644346fef5b
  garden_go :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0a33bae7f4c0ded2130b015290bb3605
  lookupPlants ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String [Garden.Plant]
    -> [Garden.Plant]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (student :: GHC.Base.String)
                   (garden3 :: Data.Map.Base.Map GHC.Base.String [Garden.Plant]) ->
                 case Garden.$slookup1 @ [Garden.Plant] student garden3 of wild {
                   GHC.Base.Nothing -> GHC.Types.[] @ Garden.Plant
                   GHC.Base.Just v -> v }) -}
instance [safe] GHC.Classes.Eq [Garden.Plant] = Garden.$fEqPlant
instance [safe] GHC.Show.Show [Garden.Plant] = Garden.$fShowPlant
"SPEC/Garden fromListWithKey @ String _" [ALWAYS] forall @ a
                                                         ($dOrd :: GHC.Classes.Ord GHC.Base.String)
  Data.Map.Base.fromListWithKey @ [GHC.Types.Char] @ a $dOrd
  = Garden.$sfromListWith_$sfromListWithKey @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

