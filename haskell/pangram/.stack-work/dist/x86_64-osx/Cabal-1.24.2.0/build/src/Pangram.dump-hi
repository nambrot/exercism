
==================== FINAL INTERFACE ====================
2017-07-07 21:39:07.266575 UTC

interface pangram-1.1.0.3-AHnJhdtFORVA8tfINjM8fT:Pangram 8002
  interface hash: e6207907a34b7bd212617dd3d1d08618
  ABI hash: 97312ceaa8f987dd25362b4e3f484bfc
  export-list hash: 24d3db42f11329098d23c2b9d04a9a8d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Pangram.isPangram
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
bf248fbf4bfa0c29e690b8227e5275f7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Pangram.$trModule2
                   Pangram.$trModule1) -}
ff035cdea3e4263ac677d7759d84fa44
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pangram"#) -}
c5a21a64e7ce0fc6ae3ae4d0c1c53dc8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pangram-1.1.0.3-AHnJhdtFORVA8tfINjM8fT"#) -}
b529233b20734aa9fc9920ce1573bd44
  isPangram :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (text :: GHC.Base.String) ->
                 let {
                   x :: [GHC.Types.Char]
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       text
                 } in
                 letrec {
                   go :: [GHC.Types.Char] -> Data.Monoid.All
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> GHC.Types.True `cast` (Sym (Data.Monoid.N:All[0]))
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Types.Char
                                 GHC.Classes.$fEqChar
                                 y
                                 x of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Monoid.N:All[0]))
                            GHC.Types.True -> go ys } }
                 } in
                 (go Pangram.isPangram1) `cast` (Data.Monoid.N:All[0])) -}
ec9c4e41b26756084ed272700d8b4666
  isPangram1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Enum.eftChar 97# 122#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

