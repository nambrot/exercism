
==================== FINAL INTERFACE ====================
2017-07-24 20:53:19.051596 UTC

interface simple-linked-list-0.1.0.2-6wfMmtM7ZAwHZomn5dCWIE:LinkedList 8002
  interface hash: 611f497c0b5caf2aac637f68eaa42143
  ABI hash: f607cd92e60be7d1aa6f230460afa870
  export-list hash: 501b3a788b71e66f92f2e5c998ada556
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  LinkedList.datum
  LinkedList.fromList
  LinkedList.isNil
  LinkedList.new
  LinkedList.next
  LinkedList.nil
  LinkedList.reverseLinkedList
  LinkedList.toList
  LinkedList.LinkedList
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
dcf53a89dd00707b9c74887556c42463
  $fEqLinkedList ::
    GHC.Classes.Eq a => GHC.Classes.Eq (LinkedList.LinkedList a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (LinkedList.LinkedList a)
                  (LinkedList.$fEqLinkedList_$c== @ a $dEq)
                  (LinkedList.$fEqLinkedList_$c/= @ a $dEq) -}
dcf53a89dd00707b9c74887556c42463
  $fEqLinkedList_$c/= ::
    GHC.Classes.Eq a =>
    LinkedList.LinkedList a
    -> LinkedList.LinkedList a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: LinkedList.LinkedList a)
                   (b :: LinkedList.LinkedList a) ->
                 case LinkedList.$fEqLinkedList_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
dcf53a89dd00707b9c74887556c42463
  $fEqLinkedList_$c== ::
    GHC.Classes.Eq a =>
    LinkedList.LinkedList a
    -> LinkedList.LinkedList a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
dcf53a89dd00707b9c74887556c42463
  $fShowLinkedList ::
    GHC.Show.Show a => GHC.Show.Show (LinkedList.LinkedList a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (LinkedList.LinkedList a)
                  (LinkedList.$fShowLinkedList_$cshowsPrec @ a $dShow)
                  (LinkedList.$fShowLinkedList_$cshow @ a $dShow)
                  (LinkedList.$fShowLinkedList_$cshowList @ a $dShow) -}
5485c03d7264f9ab5e8cddaced1e2c10
  $fShowLinkedList1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
dcf53a89dd00707b9c74887556c42463
  $fShowLinkedList_$cshow ::
    GHC.Show.Show a => LinkedList.LinkedList a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: LinkedList.LinkedList a) ->
                 LinkedList.$fShowLinkedList_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dcf53a89dd00707b9c74887556c42463
  $fShowLinkedList_$cshowList ::
    GHC.Show.Show a => [LinkedList.LinkedList a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [LinkedList.LinkedList a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (LinkedList.LinkedList a)
                   (LinkedList.$fShowLinkedList_$cshowsPrec
                      @ a
                      $dShow
                      LinkedList.$fShowLinkedList1)
                   eta
                   eta1) -}
dcf53a89dd00707b9c74887556c42463
  $fShowLinkedList_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> LinkedList.LinkedList a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
60d69cd26f8a9cbf1911710a7ffe3a6d
  $tc'End :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11041247337396100303##
                   17529410179072053222##
                   LinkedList.$trModule
                   LinkedList.$tc'End1) -}
5016f4f28f049b8af47b3dca79a93786
  $tc'End1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'End"#) -}
6d7fa3c9b90b6919df8b8188efeb2827
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6118105593064554623##
                   2859169495219098541##
                   LinkedList.$trModule
                   LinkedList.$tc'Node1) -}
ab073f98d45e83b999a73c8aeb15aca0
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
6acf1580feeefd1d48289ba0517dc022
  $tcLinkedList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   769518021204359519##
                   14848323065778414568##
                   LinkedList.$trModule
                   LinkedList.$trModule1) -}
1a5b663bd167f71d3704f767f91ef777
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LinkedList.$trModule2
                   LinkedList.$trModule1) -}
664d876970ab7957d7da46f440df9e8b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LinkedList"#) -}
4421dac708779e0daa647d19a15fa505
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "simple-linked-list-0.1.0.2-6wfMmtM7ZAwHZomn5dCWIE"#) -}
dcf53a89dd00707b9c74887556c42463
  data LinkedList a = Node a (LinkedList.LinkedList a) | End
c55816e27979116d7e511a1b134992bd
  datum :: LinkedList.LinkedList a -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: LinkedList.LinkedList a) ->
                 case ds of wild {
                   LinkedList.Node x ds1 -> x
                   LinkedList.End -> LinkedList.datum1 @ a }) -}
f85f0e6b28eef974422fa36e879dee0a
  datum1 :: a
  {- Strictness: x -}
31d53cdea1f898190d3ac1f75a6576c9
  fromList :: [a] -> LinkedList.LinkedList a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (eta :: [a]) -> LinkedList.fromList1 @ a eta) -}
bf9da698332b5ce6755f42ea46b76111
  fromList1 :: [a] -> LinkedList.LinkedList a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c8f93162379a3af377681051a1ffd0fc
  isNil :: LinkedList.LinkedList a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: LinkedList.LinkedList a) ->
                 case ds of wild {
                   LinkedList.Node ipv ipv1 -> GHC.Types.False
                   LinkedList.End -> GHC.Types.True }) -}
588f20b96d8295c791ee70648c0cdcd9
  new :: a -> LinkedList.LinkedList a -> LinkedList.LinkedList a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True) LinkedList.Node -}
ae3e1caad1e2a96453475a520665a257
  next :: LinkedList.LinkedList a -> LinkedList.LinkedList a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: LinkedList.LinkedList a) ->
                 case ds of wild {
                   LinkedList.Node ds1 x -> x
                   LinkedList.End -> LinkedList.next1 @ a }) -}
dc5b95cba0d842dea996c17075ab3e7a
  next1 :: LinkedList.LinkedList a
  {- Strictness: x -}
3a2547c7eca7f74be1f48039544bc5da
  nil :: LinkedList.LinkedList a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) LinkedList.End -}
edc0be82ef3129960016ce1422b11496
  reverseLinkedList ::
    LinkedList.LinkedList a -> LinkedList.LinkedList a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (a1 :: LinkedList.LinkedList a) ->
                 LinkedList.reverseLinkedList1 @ a a1 (LinkedList.End @ a)) -}
357a238df8127f810fc2fb0da0789f4f
  reverseLinkedList1 ::
    LinkedList.LinkedList a
    -> LinkedList.LinkedList a -> LinkedList.LinkedList a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
8ceff274d43c428b93b8213d466c482b
  toList :: LinkedList.LinkedList a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [LinkedList.LinkedList]
  = LinkedList.$fEqLinkedList
instance [safe] GHC.Show.Show [LinkedList.LinkedList]
  = LinkedList.$fShowLinkedList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

