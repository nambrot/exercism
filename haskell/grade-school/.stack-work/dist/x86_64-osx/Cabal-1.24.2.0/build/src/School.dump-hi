
==================== FINAL INTERFACE ====================
2017-07-11 16:56:53.138871 UTC

interface grade-school-0.1.0.2-3KIl9otsWWx1PMbiqZTPKm:School 8002
  interface hash: 0a0c164d3e0a757b9dbac7bb039aeffd
  ABI hash: f19c408b6d8ebac86034f7c5270d9d15
  export-list hash: 6960d34d3242df28ac1429f2142b1008
  orphan hash: 227e78133ec0010e63199cfb70dabfb6
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  School.add
  School.empty
  School.grade
  School.sorted
  School.School
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Control.Arrow 70754b538e7d75521cd68162917b6946
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
2e948dfd70705cfa4f041a7382335b96
  $sfilterGt1 ::
    School.Grade
    -> Data.Map.Base.Map School.Grade v
    -> Data.Map.Base.Map School.Grade v
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
58f60e732a68abda4b6de238aca806b4
  $sfilterLt1 ::
    School.Grade
    -> Data.Map.Base.Map School.Grade v
    -> Data.Map.Base.Map School.Grade v
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
522baf702225c9aa46fc5bc05c4d7f26
  $strim1 ::
    School.Grade
    -> School.Grade
    -> Data.Map.Base.Map School.Grade a
    -> Data.Map.Base.Map School.Grade a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U)><S,1*U> -}
e442e89a911cee43e5177c3a6757d0c2
  $strim3 ::
    School.Grade
    -> Data.Map.Base.Map School.Grade a
    -> Data.Map.Base.Map School.Grade a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
88e630fae4228668a2eb77d2b3f1deb4
  $sunionWith_$sunionWithKey ::
    (School.Grade -> a -> a -> a)
    -> Data.Map.Base.Map School.Grade a
    -> Data.Map.Base.Map School.Grade a
    -> Data.Map.Base.Map School.Grade a
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><S,1*U><S,1*U> -}
bf437523869007fde954dd2ddbd03e0a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   School.$trModule2
                   School.$trModule1) -}
1cb6c67dcff11ec533994e9dadf53a9e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "School"#) -}
61f74f407162ebd6e1b18817f81bc304
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "grade-school-0.1.0.2-3KIl9otsWWx1PMbiqZTPKm"#) -}
4b82abb3bff7c580b4ec38b13a083bbd
  $w$sgreater ::
    School.Grade
    -> Data.Map.Base.Map School.Grade a1
    -> (# GHC.Base.Maybe a1, Data.Map.Base.Map School.Grade a1 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Inline: [0] -}
028b829e9444ec58109fe748910e516a
  $w$smiddle ::
    School.Grade
    -> School.Grade
    -> Data.Map.Base.Map School.Grade a1
    -> (# GHC.Base.Maybe a1, Data.Map.Base.Map School.Grade a1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U>,
     Inline: [0] -}
221b0436f4c5971fc023260a802c81fb
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map School.Grade a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
0d63d38f1a8eccb65bc14d8df88032db
  type Grade = GHC.Types.Int
696637150591605ef5dc3849d0b6d573
  type Name = GHC.Base.String
fae1ff0568ca7deb2f18dad64b2ed8b3
  type School = [School.Student]
b99ed6c3627c350097781027ebeae015
  type Student = (School.Grade, School.Name)
429a8edd2c03210066f0830c98f6e680
  add ::
    GHC.Types.Int -> GHC.Base.String -> School.School -> School.School
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (gradeNum :: GHC.Types.Int)
                   (student :: GHC.Base.String)
                   (eta :: [(GHC.Types.Int, GHC.Base.String)]) ->
                 GHC.Types.:
                   @ (GHC.Types.Int, GHC.Base.String)
                   (gradeNum, student)
                   eta) -}
c9b7e58767603cc180df11f9741748a3
  empty :: School.School
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.[] @ School.Student) -}
3142ad36ca8cc9bc81cc8e474bafa644
  grade :: GHC.Types.Int -> School.School -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (gradeNum :: GHC.Types.Int)
                   (eta :: [(GHC.Types.Int, GHC.Base.String)]) ->
                 letrec {
                   go :: [(GHC.Types.Int, GHC.Base.String)] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(GHC.Types.Int, GHC.Base.String)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : y ys
                       -> case gradeNum of wild1 { GHC.Types.I# x ->
                          case y of wild2 { (,) x1 ds1 ->
                          case x1 of wild3 { GHC.Types.I# y1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x y1) of wild4 {
                            GHC.Types.False -> go ys
                            GHC.Types.True
                            -> GHC.Types.: @ [GHC.Types.Char] ds1 (go ys) } } } } }
                 } in
                 Data.OldList.sortBy
                   @ GHC.Base.String
                   GHC.Classes.$fOrd[]_$s$ccompare1
                   (go eta)) -}
3a5ad6ddeaaed7b7f52dd017d3390a89
  sorted :: School.School -> [(GHC.Types.Int, [GHC.Base.String])]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(School.Grade, School.Name)]) ->
                 School.sorted_go10
                   (GHC.Types.[] @ (GHC.Types.Int, [GHC.Base.String]))
                   (School.sorted_go
                      x
                      (Data.Map.Base.Tip @ School.Grade @ [School.Name]))) -}
cc59fe5d8b554670cc50a2f4af61e4e2
  sorted_go ::
    [(School.Grade, School.Name)]
    -> Data.Map.Base.Map School.Grade [School.Name]
    -> Data.Map.Base.Map School.Grade [School.Name]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
7aa42cb16d5081f23597f0cf43d6a351
  sorted_go10 ::
    [(GHC.Types.Int, [GHC.Base.String])]
    -> Data.Map.Base.Map GHC.Types.Int [School.Name]
    -> [(GHC.Types.Int, [GHC.Base.String])]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
"SPEC/School unionWithKey @ Grade _" [ALWAYS] forall @ a
                                                     ($dOrd :: GHC.Classes.Ord School.Grade)
  Data.Map.Base.unionWithKey @ GHC.Types.Int @ a $dOrd
  = School.$sunionWith_$sunionWithKey @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

